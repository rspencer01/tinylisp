( 
  (defun ≃ (x y) (> 0.00000001 (abs (- x y))))

  (define h⋮0.000001)
  (defun ∂ (f) (λ (x) 
    (/ (- (f (+ x h)) (f x))
       h
    )
  ))

  (defun update (f guess) (- guess
     (/ (f guess) 
        ((∂ f) guess)
     )
  ))
  (defun newton-iter (f x) (
    cond ((≃ (f x) 0)⋮ x)
         (⊤⋮(newton-iter f (update f x)))
  ))
  (defun solve (f) (newton-iter f 1⋮0))

  (defun √ (x) (solve (λ (y) (- x (× y y)))))
  (' Finding square root of 2)
  (√ 2)
  (' Finding square root of 3)
  (√ 3)
  (' Finding square root of 4)
  (√ 4)
  
  (defun apply-poly (x p) (
    cond (p⋮(+ (head ⋮ p) (× x (apply-poly x (tail ⋮ p)))) )
         (⊤⋮0)
  ))
  
  (defun factorial (n) (
    cond ((< n 2) ⋮ 1)
         (⊤ ⋮ (× n (factorial (- n 1))))
  ))
  (defun range (bottom top) (
    cond ((> top bottom) cons bottom (range (+ bottom 1) top))
         (⊤ list top)
  ))
  (range 1 4)

  (' Finding e as sum of reciprocals of factorials)
  (apply + (apply inv (each (λ (x) (+ 0.0 (factorial x))) (range 0 20))))
  
  (defun cos_taylor_coeff (x) (
    cond ((is_even x) / (cond ((is_even (/ x 2)) ⋮ 1) (⊤ ⋮ -1)) (factorial x))
         (⊤ ⋮ 0)
  ))
  (define cos_taylor (each cos_taylor_coeff (range 0 25)))
  
  (defun cos (x) (apply-poly x cos_taylor))
  (' Finding pi) 
  (× 2 (solve cos))  
)
